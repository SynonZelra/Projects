//libs
#include "SPI.h"
//variants
byte input;
int rows,columns;
const int rowsmax=5;
const int columnsmax=5;
int inputdelay=3;
bool state[rowsmax][columnsmax];
const int rowspin[rowsmax]={9,8,7,6,5};

void setup()
{
  //initial rows value
  for(rows=0;rows<rowsmax;rows++)
  {pinMode(rowspin[rows],OUTPUT);
  digitalWrite(rowspin[rows],LOW);}
  //initial the bool matrix
  for(rows=0;rows<rowsmax;rows++)
  {for(columns=0;columns<columnsmax;columns++)
  {state[rows][columns]=0;}}
  //latch for 74HC165
  pinMode(10,OUTPUT);
  digitalWrite(10,HIGH);
  //rows
  pinMode(9,OUTPUT);
  digitalWrite(9,HIGH);
  //begin SPI
  SPI.setClockDivider(SPI_CLOCK_DIV128);
  SPI.setDataMode(SPI_MODE0);
  SPI.setBitOrder(MSBFIRST);
  SPI.begin();
  //Serial for debugging
  Serial.begin(9600);
}

void loop()
{
  for (rows=0;rows<rowsmax;rows++)
  {
    change(rows);
    //latch the inputs
    scan();
    //check column by column
    for (columns=0;columns<columnsmax;columns++)
    {
      check(rows,columns);
    }
  }
}

//read inputs
void scan()
{
  digitalWrite(10,LOW);
  delay(1);
  digitalWrite(10,HIGH);
  //sent anything to read from SPI
  input = SPI.transfer(0x00);
}

//switch the scaning rows
void change(int var_row)
{
  switch(var_row)
  {
    case 0:
      digitalWrite(rowspin[rowsmax-1],LOW);
      digitalWrite(rowspin[0],HIGH);
      break;
    default:
      digitalWrite(rowspin[var_row-1],LOW);
      digitalWrite(rowspin[var_row],HIGH);
  }
}

//check for inputs
void check(int var_a, int var_b)
{
  if ( state[var_a][var_b] != bitRead(input,var_b) )
  {
    switch(state[var_a][var_b])
    {
      case 0:
        Serial.print(var_a);
        Serial.print(var_b);
        Serial.println(" Pressed");
        state[var_a][var_b] = true;
        delay(inputdelay);
        break;
      case 1:
        Serial.print(var_a);
        Serial.print(var_b);
        Serial.println(" Released");
        state[var_a][var_b] = false;
        delay(inputdelay);
        break;
    }
  }
}
